datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Shop {
  id                String    @id @default(uuid())
  domain            String    @unique
  accessToken       String
  accessTokenScope  String
  installedAt       DateTime  @db.Timestamptz(3)
  uninstalledAt     DateTime? @db.Timestamptz(3)
  planId            String
  plan              Plan      @relation(fields: [planId], references: [id], onDelete: Restrict)
  planChargeId      BigInt?
  lastTrialAt       DateTime? @db.Timestamptz(3)
  showPlansModal    Boolean
  showOnboarding    Boolean
  locations         Location[]
  settings          Settings?
  searchFilters     SearchFilter[]
  customFields      CustomField[]
  createdAt         DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime  @updatedAt      @db.Timestamptz(3)
}

model Settings {
  id                String  @id @default(uuid())
  shopId            String  @unique
  shop              Shop    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  googleMapsApiKey  String
  timezone          String
}

model Plan {
  id        String  @id
  name      String
  price     Decimal
  enabled   Boolean
  trialDays Int
  shops     Shop[]
}

model Location {
  id                String    @id @default(uuid())
  name              String
  active            Boolean
  phone             String
  email             String
  website           String
  address1          String
  address2          String
  city              String
  state             String
  zip               String
  country           String
  lat               Float
  lng               Float
  shopId            String
  shop              Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  searchFilters     SearchFilter[]
  customFieldValues CustomFieldValue[]
  createdAt         DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime  @updatedAt      @db.Timestamptz(3)
}

model SearchFilter {
  id            String    @id @default(uuid())
  name          String
  position      Int
  showInList    Boolean
  showInMap     Boolean
  shopId        String
  shop          Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  locations     Location[]
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt      @db.Timestamptz(3)

  @@unique([shopId, name])
}

enum CustomFieldLabelPosition {
  inline
  top
}

model CustomField {
  id                String    @id @default(uuid())
  name              String
  position          Int
  shopId            String
  shop              Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  hideLabel         Boolean
  labelPosition     CustomFieldLabelPosition
  showInList        Boolean
  showInMap         Boolean
  defaultValue      String
  customFieldValues CustomFieldValue[]
  createdAt         DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime  @updatedAt      @db.Timestamptz(3)

  @@unique([shopId, name])
}

model CustomFieldValue {
  id            String      @id @default(uuid())
  value         String
  locationId    String
  location      Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)
  customFieldId String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([locationId, customFieldId])
}
