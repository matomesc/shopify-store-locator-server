datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

model Shop {
  id                String    @id @default(uuid())
  domain            String    @unique
  name              String
  email             String
  ownerName         String
  accessToken       String
  accessTokenScope  String
  installedAt       DateTime  @db.Timestamptz(3)
  uninstalledAt     DateTime? @db.Timestamptz(3)
  planId            String
  plan              Plan      @relation(fields: [planId], references: [id], onDelete: Restrict)
  planChargeId      BigInt?
  lastTrialAt       DateTime? @db.Timestamptz(3)
  showPlansModal    Boolean
  showOnboarding    Boolean
  shopifyRawData    Json
  locations         Location[]
  settings          Settings?
  searchFilters     SearchFilter[]
  customFields      CustomField[]
  customActions     CustomAction[]
  languages         Language[]
  sessions          Session[]
  createdAt         DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime  @updatedAt      @db.Timestamptz(3)
}

enum MapMarkerType {
  pin
  image
}

model Settings {
  id                                        String  @id @default(uuid())
  shopId                                    String  @unique
  shop                                      Shop    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  googleMapsApiKey                          String
  timezone                                  String
  borderRadius                              String
  searchInputBorderColor                    String
  searchInputBackgroundColor                String
  searchInputPlaceholderColor               String
  searchButtonTextColor                     String
  searchButtonBackgroundColor               String
  searchButtonHoverBackgroundColor          String
  searchFilterTextColor                     String
  searchFilterBackgroundColor               String
  searchFilterHoverBackgroundColor          String
  searchFilterSelectedBorderColor           String
  searchFilterSelectedBackgroundColor       String
  searchFilterSelectedHoverBackgroundColor  String
  listLocationNameColor                     String
  listTextColor                             String
  listLinkColor                             String
  listSearchFilterColor                     String
  listCustomActionTextColor                 String
  listCustomActionBackgroundColor           String
  listCustomActionHoverBackgroundColor      String
  listSelectedLocationBorderColor           String
  listPinAndDistanceColor                   String
  mapMarkerType                             MapMarkerType
  mapMarkerBackgroundColor                  String
  mapMarkerBorderColor                      String
  mapMarkerGlyphColor                       String
  mapMarkerImage                            String
  mapLocationNameColor                      String
  mapTextColor                              String
  mapLinkColor                              String
  mapSearchFilterColor                      String
  mapCustomActionTextColor                  String
  mapCustomActionBackgroundColor            String
  mapCustomActionHoverBackgroundColor       String
}

model Plan {
  id                  String  @id
  name                String
  price               Decimal
  enabled             Boolean
  trialDays           Int
  locationsLimit      Int
  languagesLimit      Int
  analyticsRetention  Int
  shops               Shop[]
}

model Location {
  id                  String    @id @default(uuid())
  name                String
  active              Boolean
  phone               String
  email               String
  website             String
  address1            String
  address2            String
  city                String
  state               String
  zip                 String
  country             String
  lat                 Float
  lng                 Float
  shopId              String
  shop                Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  searchFilters       SearchFilter[]
  customFieldValues   CustomFieldValue[]
  customActionValues  CustomActionValue[]
  createdAt           DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime  @updatedAt      @db.Timestamptz(3)

  @@index([shopId])
  @@index([active])
}

model SearchFilter {
  id            String    @id @default(uuid())
  name          String
  position      Int
  enabled       Boolean
  showInList    Boolean
  showInMap     Boolean
  shopId        String
  shop          Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  locations     Location[]
  translations  Translation[]
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt      @db.Timestamptz(3)

  @@unique([shopId, name])
  @@index([shopId])
  @@index([enabled])
  @@index([position])
}

enum CustomFieldLabelPosition {
  inline
  top
}

model CustomField {
  id                String    @id @default(uuid())
  name              String
  position          Int
  enabled           Boolean
  shopId            String
  shop              Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  hideLabel         Boolean
  labelPosition     CustomFieldLabelPosition
  showInList        Boolean
  showInMap         Boolean
  defaultValue      String
  customFieldValues CustomFieldValue[]
  translations      Translation[]
  createdAt         DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime  @updatedAt      @db.Timestamptz(3)

  @@unique([shopId, name])
  @@index([shopId])
  @@index([enabled])
  @@index([position])
}

model CustomFieldValue {
  id            String      @id @default(uuid())
  value         String
  locationId    String
  location      Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)
  customFieldId String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([locationId, customFieldId])
  @@index([locationId])
}

enum CustomActionType {
  link
  js
}

model CustomAction {
  id                  String    @id @default(uuid())
  name                String
  type                CustomActionType
  position            Int
  enabled             Boolean
  showInList          Boolean
  showInMap           Boolean
  defaultValue        String
  openInNewTab        Boolean
  customActionValues  CustomActionValue[]
  shopId              String
  shop                Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  translations        Translation[]
  createdAt           DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime  @updatedAt      @db.Timestamptz(3)

  @@unique([shopId, name])
  @@index([shopId])
  @@index([enabled])
  @@index([position])
}

model CustomActionValue {
  id              String        @id @default(uuid())
  value           String
  locationId      String
  location        Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  customActionId  String
  customAction    CustomAction  @relation(fields: [customActionId], references: [id], onDelete: Cascade)

  @@unique([locationId, customActionId])
  @@index([locationId])
}

model Language {
  id            String    @id @default(uuid())
  code          String
  shopId        String
  shop          Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  enabled       Boolean
  translations  Translation[]
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt      @db.Timestamptz(3)

  @@unique([shopId, code])
  @@index([shopId])
  @@index([enabled])
}

model Translation {
  id              String          @id @default(uuid())
  languageId      String
  language        Language        @relation(fields: [languageId], references: [id], onDelete: Cascade)
  value           String
  target          String?
  searchFilterId  String?
  searchFilter    SearchFilter?   @relation(fields: [searchFilterId], references: [id], onDelete: Cascade)
  customFieldId   String?
  customField     CustomField?    @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customActionId  String?
  customAction    CustomAction?   @relation(fields: [customActionId], references: [id], onDelete: Cascade)

  @@unique([languageId, target])
  @@unique([languageId, searchFilterId])
  @@unique([languageId, customFieldId])
  @@unique([languageId, customActionId])
  @@index([languageId])
}

model Session {
  id                    String    @id @default(uuid())
  shopId                String
  shop                  Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  ip                    String
  country               String
  countryCode           String
  region                String
  regionName            String
  city                  String
  zip                   String
  ipGeolocationLat      Float
  ipGeolocationLng      Float
  browserGeolocationLat Float?
  browserGeolocationLng Float?
  language              String
  mobile                Boolean
  searchEvents          SearchEvent[]
  createdAt             DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime  @updatedAt      @db.Timestamptz(3)

  @@index([shopId])
  @@index([createdAt])
}

model SearchEvent {
  id        String    @id @default(uuid())
  sessionId String
  session   Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  query     String
  lat       Float
  lng       Float
  createdAt DateTime  @default(now()) @db.Timestamptz(3)

  @@index([sessionId])
}
